public class ProducersController : Controller
{
private readonly AppDbContext _context;

public ProducersController(AppDbContext context)
{
_context = context;
}

// GET: Producers/Delete/5
public async Task<IActionResult> Delete(int? id)
    {
    if (id == null)
    {
    return NotFound();
    }

    var producer = await _context.Producers
    .FirstOrDefaultAsync(m => m.Id == id);
    if (producer == null)
    {
    return NotFound();
    }

    return View(producer);
    }

    // POST: Producers/Delete/5
    [HttpPost, ActionName("Delete")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
        {
        var producer = await _context.Producers.FindAsync(id);
        _context.Producers.Remove(producer);
        await _context.SaveChangesAsync();
        return RedirectToAction(nameof(Index));
        }

        // GET: Producers/Edit/5
        public async Task<IActionResult> Edit(int? id)
            {
            if (id == null)
            {
            return NotFound();
            }

            var producer = await _context.Producers.FindAsync(id);
            if (producer == null)
            {
            return NotFound();
            }
            return View(producer);
            }

            // POST: Producers/Edit/5
            [HttpPost]
            [ValidateAntiForgeryToken]
            public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Bio")] Producer producer)
                {
                if (id != producer.Id)
                {
                return NotFound();
                }

                if (ModelState.IsValid)
                {
                try
                {
                _context.Update(producer);
                await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                if (!ProducerExists(producer.Id))
                {
                return NotFound();
                }
                else
                {
                throw;
                }
                }
                return RedirectToAction(nameof(Index));
                }
                return View(producer);
                }

                private bool ProducerExists(int id)
                {
                return _context.Producers.Any(e => e.Id == id);
                }
                }